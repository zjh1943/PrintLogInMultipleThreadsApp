/*
 * This source file was generated by the Gradle 'init' task
 */
package printloginmultiplethreadapp;

import java.util.ArrayList;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.lang.management.ManagementFactory;
import java.lang.management.ThreadMXBean;
import java.lang.management.ThreadInfo;

import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.nio.file.Files;
import java.nio.file.Paths;

class ThreadStatus {
    long startTime;
    long endTime;
    boolean completed;

    ThreadStatus(long startTime, long endTime, boolean completed) {
        this.startTime = startTime;
        this.endTime = endTime;
        this.completed = completed;
    }
}



public class App {
    private static final Logger logger = LoggerFactory.getLogger(App.class);
    private static final int THREAD_COUNT = 30;
    private static final int PRINT_COUNT = 1;
    

    public String getGreeting() {
        return "Hello World!";
    }

    static private void generateThreadDump() {
        ThreadMXBean threadMXBean = ManagementFactory.getThreadMXBean();
        ThreadInfo[] threadInfos = threadMXBean.dumpAllThreads(true, true);
        
        String timestamp = LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyyMMdd_HHmmss"));
        String fileName = "thread_dump_" + timestamp + ".txt";
        
        try {
            Files.createDirectories(Paths.get("thread_dumps"));
            try (PrintWriter writer = new PrintWriter(new FileWriter("thread_dumps/" + fileName))) {
                writer.println("Thread Dump at " + timestamp);
                writer.println("=========================");
                
                for (ThreadInfo threadInfo : threadInfos) {
                    writer.println(threadInfo.toString());
                }
            }
            logger.info("Thread dump saved to {}", fileName);
        } catch (IOException e) {
            logger.error("Failed to write thread dump to file", e);
        }
    }

    public static void main(String[] args) {
        // get the current time.
        long startTime = System.currentTimeMillis();
        // create 100 threads, each thread:
        List<ThreadStatus> threadStatuses = new ArrayList<>();

        for (int i = 0; i < THREAD_COUNT; i++) {
            Thread thread = new Thread(() -> {
                String randomString = new String(new char[10000]).replace('\0', 'a'); // create a very long string
                long threadId = Thread.currentThread().getId();
                long threadStartTime = System.currentTimeMillis();
                ThreadStatus threadStatus = new ThreadStatus(threadStartTime, 0, false);
                threadStatuses.add(threadStatus);
                System.out.println("Thread " + threadId + " started at "
                        + new java.text.SimpleDateFormat("HH:mm:ss.SSS").format(threadStartTime));

                for (int j = 0; j < PRINT_COUNT; j++) {
                    long currentTime = System.currentTimeMillis();
                    System.out.println(new java.text.SimpleDateFormat("HH:mm:ss.SSS").format(currentTime) + " " + "Thread ID: " + threadId + " Iteration: " + j + " Random String: " + randomString);
                }

                long threadEndTime = System.currentTimeMillis();
                System.out.println("Thread " + threadId + " ended at "
                        + new java.text.SimpleDateFormat("HH:mm:ss.SSS").format(threadEndTime));
                System.out
                        .println("Time taken by thread " + threadId + ": " + (threadEndTime - threadStartTime) + " ms");

                threadStatus.endTime = threadEndTime;
                threadStatus.completed = true;
            });
            thread.start();
        }

    
        int seconds = 0;
        // wait for all threads to complete
        while (true) {
            
            // print the statics of status of all threads including:
            // - progress: {completed threads count}/{total threads count},
            // - average time taken by each thread
            // - max time taken by a thread
            // - min time taken by a thread
            int completedThreads = 0;
            long totalTime = 0;
            long maxTime = Long.MIN_VALUE;
            long minTime = Long.MAX_VALUE;

            for (ThreadStatus threadStatus : threadStatuses) {
                if (threadStatus.completed) {
                    completedThreads++;
                    long timeTaken = 0;
                    if (threadStatus.endTime > 0) {
                        timeTaken = threadStatus.endTime - threadStatus.startTime;
                    } else {
                        timeTaken = System.currentTimeMillis() - threadStatus.startTime;
                    }
                    totalTime += timeTaken;
                    if (timeTaken > maxTime) {
                        maxTime = timeTaken;
                    }
                    if (timeTaken < minTime) {
                        minTime = timeTaken;
                    }
                }
            }

            int countedThreads = threadStatuses.size();
            double averageTime = completedThreads > 0 ? (double) totalTime / completedThreads : 0;

            logger.info("Progress (completed/counted/total): " + completedThreads + "/" + countedThreads + "/" + THREAD_COUNT);
            logger.info("Average time taken by each thread: " + averageTime + " ms");
            logger.info("Max time taken by a thread: " + maxTime + " ms");
            logger.info("Min time taken by a thread: " + minTime + " ms");
            
            if (completedThreads >= THREAD_COUNT) {
                break;
            }

            try {
                Thread.sleep(1000);
                // generate dump every 5 seconds
                if (seconds % 5 == 0) {
                    generateThreadDump();
                }
                // save thread dump
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            seconds += 1;
        }

        long endTime = System.currentTimeMillis();
        logger.info("Total time for all threads: " + (endTime - startTime) + " ms");

    }
}


